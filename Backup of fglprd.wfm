////////////////////////////////////////////////////////////////////////////////
// Output Filename: C:\KENSERVICE\IDSSYS\FGLPRD_FCV.WFM                       //
// Created By:      dBASE Form Converter Wizard                               //
// Created On:      Tuesday June 14, 2016 At 10:59:51                         //
// Object Count:    18                                                        //
////////////////////////////////////////////////////////////////////////////////
*******************************************************************************
*  PROGRAM:      FGLPRD.wfm
*
*  WRITTEN BY:   W Nyongesa
*
*  DATE:         05/2000
*
*  UPDATED:     09/2012
*
*  REVISION:     $Revision:   1.0
*
*  VERSION:      Visual dBASE
*
*  DESCRIPTION:  This program maintains the companies master file
*
*  PARAMETERS:   None
*
*  CALLS:        FGLPRD.mnu         (Menu file)
*                KBUTTONS.CC          (Custom Controls file)
*                PERIODS.qbe         (View of tables)
*
*  USAGE:        DO FGLPRD.wfm
*
*******************************************************************************
#include <messdlg.h>
shell(.F.)
create session
set talk off
set design off
_app.FrameWin.Visible = .F.
_app.FrameWin.Text = "FGLPRD"
set century on
set ldCheck off && To avoid language driver conflicts
#define Maxcoy 999
** END HEADER -- do not remove this line
//
// Generated on 30/09/2021
//
parameter bUser,bLevel,bModal
local f
f = new FGLPRDFORM()
if (bModal)
   f.mdi = false // ensure not MDI
   f.readModal()
else
   f.open()
endif

class FGLPRDFORM of FORM
   with (this)
      onClose = class::ONCLOSE
      open = class::OPEN
      metric = 6	// Pixels
      colorNormal = "N+"
      height = 932.0
      left = -47.0
      top = -84.0
      width = 910.0
      text = "PERIODS Maintenance Form"
      windowState = 2	// Normal
      mdi = false
      sizeable = false
      moveable = false
      view = "FGLPRD.QBE"
      menuFile = "FGLPRD.MNU"
      escExit = false
      mousePointer = 1	// Arrow
      maximize = false
      minimize = false
   endwith

   this.CODETEXT = new TEXTLABEL(this)
   with (this.CODETEXT)
      height = 21.0
      left = 35.0
      top = 81.0
      width = 113.0
      text = "PERIOD No.:"
      colorNormal = "B/BtnFace"
      fontName = "MS Sans Serif"
      fontBold = true
      alignVertical = 1	// Middle
      alignHorizontal = 2	// Right
   endwith

   this.PTYP = new ENTRYFIELD(this)
   with (this.PTYP)
      dataLink = "FGLPRD->PERIOD"
      enabled = false
      height = 26.0
      left = 168.0
      top = 81.0
      width = 28.0
      picture = "99.99"
      colorNormal = "N/BtnFace"
      colorHighLight = "B+/W*"
      fontName = "MS Sans Serif"
      fontBold = true
   endwith

   this.LNAMETEXT = new TEXTLABEL(this)
   with (this.LNAMETEXT)
      height = 22.0
      left = 203.0
      top = 81.0
      width = 65.0
      text = "MONTH:"
      colorNormal = "B/BtnFace"
      fontName = "MS Sans Serif"
      fontBold = true
      alignVertical = 1	// Middle
      alignHorizontal = 2	// Right
   endwith

   this.LNAMEENTRY = new ENTRYFIELD(this)
   with (this.LNAMEENTRY)
      dataLink = "FGGLMTHS->NAME"
      enabled = false
      height = 28.0
      left = 280.0
      top = 81.0
      width = 264.0
      function = "!"
      colorNormal = "N/BtnFace"
      colorHighLight = "B+/W*"
      fontName = "MS Sans Serif"
      fontBold = true
      validErrorMsg = "Name of Company Required"
   endwith

   this.TEXT6 = new TEXTLABEL(this)
   with (this.TEXT6)
      height = 22.0
      left = 179.0
      top = 115.0
      width = 89.0
      text = "Short Name:"
      colorNormal = "B/BtnFace"
      fontName = "MS Sans Serif"
      fontBold = true
      alignVertical = 1	// Middle
      alignHorizontal = 2	// Right
   endwith

   this.SLNAME = new ENTRYFIELD(this)
   with (this.SLNAME)
      dataLink = "FGGLMTHS->LNAME"
      enabled = false
      height = 28.0
      left = 278.0
      top = 115.0
      width = 65.0
      function = "!"
      colorNormal = "N/BtnFace"
      colorHighLight = "B+/W*"
      fontName = "MS Sans Serif"
      fontBold = true
   endwith

   this.TEXT1 = new TEXTLABEL(this)
   with (this.TEXT1)
      height = 21.0
      left = 41.0
      top = 159.0
      width = 215.0
      text = "CALENDAR MONTH NO:"
      colorNormal = "B/BtnFace"
      fontName = "MS Sans Serif"
      fontBold = true
      alignVertical = 1	// Middle
      alignHorizontal = 2	// Right
   endwith

   this.SGLACT = new ENTRYFIELD(this)
   with (this.SGLACT)
      dataLink = "FGGLMTHS->MM"
      enabled = false
      height = 28.0
      left = 278.0
      top = 157.0
      width = 50.0
      function = "!"
      colorNormal = "N/BtnFace"
      colorHighLight = "B+/W*"
      fontName = "MS Sans Serif"
      fontBold = true
   endwith

   this.TEXT2 = new TEXTLABEL(this)
   with (this.TEXT2)
      height = 22.0
      left = 179.0
      top = 200.0
      width = 89.0
      text = "Start Date:"
      colorNormal = "B/BtnFace"
      fontName = "MS Sans Serif"
      fontBold = true
      alignVertical = 1	// Middle
      alignHorizontal = 2	// Right
   endwith

   this.SDATE = new ENTRYFIELD(this)
   with (this.SDATE)
      onChange = class::SDATE_ONCHANGE
      dataLink = "FGLPRD->START_DATE"
      enabled = false
      height = 28.0
      left = 278.0
      top = 200.0
      width = 110.0
      function = "!"
      colorNormal = "N/BtnFace"
      colorHighLight = "B+/W*"
      fontName = "MS Sans Serif"
      fontBold = true
   endwith

   this.TEXT3 = new TEXTLABEL(this)
   with (this.TEXT3)
      height = 22.0
      left = 168.0
      top = 251.0
      width = 100.0
      text = "End Date:"
      colorNormal = "B/BtnFace"
      fontName = "MS Sans Serif"
      fontBold = true
      alignVertical = 1	// Middle
      alignHorizontal = 2	// Right
   endwith

   this.ENTRYFIELD1 = new ENTRYFIELD(this)
   with (this.ENTRYFIELD1)
      onChange = class::ENTRYFIELD1_ONCHANGE
      dataLink = "FGLPRD->END_DATE"
      enabled = false
      height = 28.0
      left = 278.0
      top = 251.0
      width = 110.0
      function = "!"
      colorNormal = "N/BtnFace"
      colorHighLight = "B+/W*"
      fontName = "MS Sans Serif"
      fontBold = true
   endwith

   this.TEXT4 = new TEXT(this)
   with (this.TEXT4)
      height = 25.0
      left = 168.0
      top = 297.0
      width = 105.0
      fontBold = true
      text = "Status of Period:"
   endwith

   this.STATUS = new COMBOBOX(this)
   with (this.STATUS)
      onChange = class::STATUS_ONCHANGE
      dataLink = "FGLPRD->STATUS"
      enabled = false
      height = 25.0
      left = 280.0
      top = 297.0
      width = 105.0
      fontBold = true
      colorNormal = "maroon/silver"
      dataSource = 'array {"","","OPEN","CLOSED"}'
      style = 2	// DropDownList
      dropDownHeight = 132.0
   endwith

   this.PREVBUTTON = new PUSHBUTTON(this)
   with (this.PREVBUTTON)
      onClick = class::PREVIOUS
      height = 26.0
      left = 112.0
      top = 330.0
      width = 85.0
      text = "&PREVIOUS"
      fontName = "MS Sans Serif"
      fontSize = 8.0
      fontBold = true
   endwith

   this.NEXTBUTTON = new PUSHBUTTON(this)
   with (this.NEXTBUTTON)
      onClick = class::NEXT
      height = 26.0
      left = 196.0
      top = 330.0
      width = 85.0
      text = "&NEXT"
      fontName = "MS Sans Serif"
      fontSize = 8.0
      fontBold = true
   endwith

   this.FIRSTBUTTON = new PUSHBUTTON(this)
   with (this.FIRSTBUTTON)
      onClick = {; form.CheckCommit(form.inEditMode);GO TOP;}
      height = 26.0
      left = 287.0
      top = 330.0
      width = 85.0
      text = "F&IRST"
      fontName = "MS Sans Serif"
      fontSize = 8.0
      fontBold = true
   endwith

   this.LASTBUTTON = new PUSHBUTTON(this)
   with (this.LASTBUTTON)
      onClick = {; form.CheckCommit(form.inEditMode);GO BOTTOM;}
      height = 26.0
      left = 378.0
      top = 330.0
      width = 85.0
      text = "&LAST"
      fontName = "MS Sans Serif"
      fontSize = 8.0
      fontBold = true
   endwith


   procedure Open
   ****************************************************************************
   private CodeField
   form.firstime = .T.
    FORM.blUSER = BUSER
   FORM.bLEVEL = BLEVEL
   IF EMPTY(FORM.blUSER) .OR. EMPTY(FORM.bLEVEL)
   QUIT
   ENDIF
   if type("form.init") = "U"
      form.init = .T.

      set skip to                     && FGLPRD.qbe contains set skip to gldtl
      set exact off                   && the .qbe file contains SET EXACT ON

      set procedure to sampProc.prg additive
    Form.duplicate = .F.
      form.inEditMode = .F.           && indicator of view/edit state
      form.changesMade = .F.          && indicator of changes made to field values
      form.previousRecord = .F.       && Save record number when appending
        *** do calculations in another area so form doesn't get updated
        form.updated = .f.
      select FGLPRD
      set order to PERIOD
    GO TOP                                  && new Receipts
   if empty(PERIOD)
   delete
   endif
   go top
   if eof()
      form.norecs = .t.
      else
      form.norecs = .f.
    endif



      *** Open table for calculating totals and balance due in another work area
      *** so that datalinks are not affected by record movements


      ***
    *  if type("form.parentpayeeForm") <> "U" && Esc ok if have parent
    *     form.escExit = .T.
   *   endif

   endif
   * form.CoyInfoButton.KenpName = "FGLPRD.WFM"

   form::Open()                         && Now the form actually opens
   *    form.BrowseOnNavigate()              && calculate totals
   *       form.codingerrors()                        && check coding errors

   *      form.next.setfocus()
   ****************************************************************************

   procedure OnClose

   * Clean up.
   ****************************************************************************

   if this.inEditMode
      form.ViewEdit()                      && Finish transaction
   endif
   rollback()
   select FGLPRD
   go top
   do FGLPRDs_rtn
   close databases
     close procedure SAMPProc.prg


   ****************************************************************************

   procedure BrowseOnNavigate
   ****************************************************************************
       form.ptyp.Enabled = .F.
       if eof()
      form.root.FGLPRD.viewEdit.enabled = .F.
   else
      form.root.FGLPRD.viewEdit.enabled = .T.
   endif



   ****************************************************************************

   procedure ChangesMade

   * Indicate that changes have been made to the current record
   ****************************************************************************
   Form.ChangesMade = .T.
   ****************************************************************************

    procedure Next

   * Go to next record.
   ****************************************************************************

   form.CheckCommit(form.inEditMode)
   if .not. empty(dbf())  .and. .not. eof()      && if a table is open in the current workarea
      skip
      if eof()
         go bottom
         AlertMessage("At the last record","Alert")
      endif
   else
      InformationMessage("There is no table open in the current workarea.",;
         "Info")
   endif
    ****************************************************************************

   procedure Previous

   * Go to previous record.
   ****************************************************************************

   form.CheckCommit(form.inEditMode)
 if .not. empty(dbf())  .and. .not. eof() && if a table is open in the current workarea
      skip - 1
      if bof()
         go top
         AlertMessage("At the first record","Alert")
      endif
   else
      InformationMessage("There is no table open in the current workarea.",;
         "Info")
   endif

   ****************************************************************************

   function SCLOSED_onGotFocus
       select fglprd
   replace open_prd with .f.
   replace status with this.value
      form.changesmade = .t.
      return

   procedure CheckCommit (newInEditMode)

        * Finish transaction, if it has been started.
   ****************************************************************************
   private CodeField, changesMade
    local lk1
    lk1 = form.ptyp.value
   changesMade = form.changesMade
   if form.changesMade
      CodeField = field(1)  && Field period
      if     ConfirmationMessage("Commit changes?",;
                FormatStr("PERIOD %1",&CodeField)) = YES  .and. .not. empty(dbf())
         commit()

      else
         rollback()
         if .not. bof()
       *  if .not. empty(form.previousRecord)
   *            go bookmark()
           * form.previousRecord
            form.previousRecord = .F.
         endif
      endif

       form.ptyp.enabled = .F.
    if form.inEditMode .and. newInEditMode
     *    begintrans()
      endif
      form.changesMade = .F.
   endif
   if form.inEditMode <> newInEditMode
      if newInEditMode                       && Going to Edit mode
     *    begintrans()
      else                                   && Going to View mode
         if .not. changesMade .AND. .NOT. FORM.DUPLICATE
            rollback()
         endif
      endif
      form.inEditMode = newInEditMode
   endif

   * form.root.Receipt.add.enabled = .T.
   *form.codingerrors()
   ****************************************************************************

   procedure ViewEdit

   * Toggle between View and Edit modes.
   ****************************************************************************
   local inEditMode, editMenu, control

   editMenu = form.root.FGLPRD.VIEWEdit

   *** If ending edit mode then close transaction, otherwise open it.
   if form.inEditMode
      form.checkChanged(.F.)
      editMenu.text = "&Edit"
      editMenu.shortcut = "Ctrl-E"
      editMenu.statusMessage = "Edit data."
      *form.root.FGLPRD.delete.enabled = .F.      && disabled in view mode
      form.CheckCommit(.F.)                        && Check transaction and
      form.text = "PERIODS Maintenance -- View Mode"          && change mode to View
   *      form.notesEditor.colorNormal = "N/W"
   *      form.childBrowse.modify = .F.
   *      form.notesEditor.modify = .F.
      form.statusmessage = "In View Mode. " + ;
                           "Select PERIODS - Edit menu to " + ;
                           "edit/delete data."
    else                                            && Switch to edit mode
      editMenu.text = "Vi&ew"
      editMenu.shortcut = "Ctrl-E"
      editMenu.statusMessage = "View data."
      *form.root.FGLPRD.delete.enabled = .F.      && enabled in edit mode
      form.CheckCommit(.T.)                        && Check transaction and
      form.text = "PERIODS Maintenance -- Edit Mode"          && change mode to Edit

   *     form.notesEditor.modify = .T.
      form.statusmessage = "In Edit Mode.  " + ;
                           "Select menu PERIODS - View to switch " + ;
                           "to View mode."
        form.ptyp.Enabled = .F.


   endif

   inEditMode = form.inEditMode     && Faster if we don't reference a form
   control = form.first             &&    variable each time through the loop
   do
      if .not. control.className $ "BROWSE,EDITOR,NEXTBUTTON,PREVBUTTON,PUSHBUTTON,IMAGE,TEXT"
         control.enabled = inEditMode
      endif
      control = control.before
   until control.name = form.first.name
     form.lnameentry.enabled = .F.
    form.slname.enabled = .f.
       form.sglact.ENABLED = .F.
        form.ptyp.Enabled = .F.


   ****************************************************************************

   procedure CheckChanged(callCommit)

   * Check if changes have been made to the current entryfield.  This procedure
   * is called from menu routines to make sure the form.changesMade gets
   * updated when a menu is selected while the changed control has focus.
   ****************************************************************************
   private control, fieldValue, controlValue, typeText, typeValue

   if form.inEditMode
      control = form.activeControl
      if type("control.datalink") <> "U"
         fieldValue = control.datalink          && name of table field

         typeText = type("control.text")
         typeValue = type("control.value")
         do case
            case typeValue = "C"
               controlValue = control.value
            case typeValue $ "LU" .and. typeText = "C"
               controlValue = control.text
            otherwise
               controlValue = Null
         endcase
         if controlValue <> &fieldValue
            form.changesMade = .T.
         endif
      endif
   endif
   if form.changesMade .and. callCommit
      CLASS::CheckCommit(form.inEditMode)     && Check transactions
   endif



   ****************************************************************************

   Procedure SDATE_OnChange
   select fglprd
         if month(this.value) = val(fgglmths->mm)
        replace start_Date with this.value
         else
         replace start_date with {}
         endif
          form.changesmade = .t.

   Procedure ENTRYFIELD1_OnChange
   select fglprd
    if month(this.value) =  val(fgglmths->mm)
        replace end_date with this.value
         else
         replace end_date with {}
         endif
          form.changesmade = .t.

   function SOPEN_onChange
      SELECT FGLPRD
      REPLACE OPEN_PRD WITH THIS.VALUE
      FORM.CHANGESMADE = .T.
      return

   function SPERIOD_onGotFocus
   select fglprd
   replace open_prd with .t.
   replace status with this.value
      form.changesmade = .t.
      return

   function STATUS_onChange
         select fglprd
         REPLACE STATUS WITH THIS.VALUE
         IF THIS.VALUE = 'OPEN'  .and. .not. empty(start_date) .and. .not. ;
         empty(end_date)
   replace open_prd with .t.
   ELSE
     replace open_prd with .F.
     replace status with 'CLOSED'
     ENDIF
      form.changesmade = .t.
      return

endclass

Procedure FGLPRDs_rtn
   private eofFGLPRD,p1,p2
   eofFGLPRD = .f.
   set safety off
   SELECT FGLPRD2
   SET ORDER TO PERIOD
   select FGLPRDs
   zap
    set order to PERIOD
     set safety on
   select FGLPRD2
   go top
   if .not. eof()
      do
         do rtn1
         until eofFGLPRD
     endif
procedure rtn1
       p2 = FGLPRD2->PERIOD
      do rtn2
   select FGLPRD2
   skip
   if eof()
   eofFGLPRD = .t.
   endif

Procedure rtn2
   select FGLPRDs
      seek p2
      if .not. found()
      append blank
       replace PERIOD with p2
      endif
       replace START_DATE WITH FGLPRD2->START_DATE
       replace END_DATE with FGLPRD2->END_DATE
       replace MM with fglPRD2->MM
       REPLACE OPEN_PRD WITH FGLPRD2->OPEN_PRD
